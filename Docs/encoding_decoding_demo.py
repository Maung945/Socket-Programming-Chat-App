import os
import sys
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)
from Common.Packet import LitProtocolPacket

#Sample values for creating a LitProtocolPacket object
message_type = b'\x00\x00'       #TEXT MESSAGE...
options_flags = b'\x00\x00'      #NO ENCRYPTION...
message_id = os.urandom(8)       #Dummy ID, not decided on what information will be here...
iv = os.urandom(16)              #Dummy IV for future encryption implementation...
payload = "sample payload"       #Retrieve message payload from UI...
hmac = os.urandom(32)            #Dummy HMAC for future encryption implementation...

#Create the LitProtocolPacket object...
message_packet = LitProtocolPacket(
    message_type=message_type,
    options_flags=options_flags,
    init=message_id,
    iv=iv,
    hmac=hmac,
    payload=payload.encode()  #Serialize the payload to a byte string...
)


encoded_packet = LitProtocolPacket.encodePacket(message_packet) #Encoding (serializing) packet...
decoded_packet = LitProtocolPacket.decodePacket(encoded_packet) #Decoding (deserializing) pacet...

print("ORIGINAL:", message_packet)
print("ENCODED:", encoded_packet)
print("DECODED:", decoded_packet)

#Retriving message (payload) from packet and determining message type...
if(decoded_packet.message_type == b'\x00\x00'):
    print("Payload from Packet (text message): " + decoded_packet.payload.decode())
elif(decoded_packet.message_type == b'\x00\x01'):
    print("Payload from Packet (image)...") 
    #Logic for decoding images not implemented yet...
else:
    print("Payload from Packet (other kind of file)...") 
    #Add logic for other files as needed...